#!/usr/bin/env ruby

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gonano/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

include Hookit::Helper::NFS

converged_config = converge( Hooky::Parity::CONFIG_DEFAULTS, payload[:config] || {} )

# Import rpcbind service (and start)
directory '/etc/service/rpcbind' do
  recursive true
end

template '/etc/service/rpcbind/run' do
  mode 0755
  source 'run-root.erb'
  variables ({ exec: "rpcbind -f" })
end

# Import storage service (and start)
directory '/etc/service/storage' do
  recursive true
end

directory '/etc/service/storage/log' do
  recursive true
end

template '/etc/service/storage/log/run' do
  mode 0755
  source 'log-run.erb'
  variables ({ svc: "storage" })
end

template '/etc/service/storage/run' do
  mode 0755
  variables ({ exec: "/data/sbin/unfsd -d" })
end

service 'storage' do
  action :enable
  init :runit
end

ensure_socket 'storage' do
  port '2049'
  action :listening
end

# Import ssh service (and start)

directory '/etc/service/ssh' do
  recursive true
end

directory '/etc/service/ssh/log' do
  recursive true
end

template '/etc/service/ssh/log/run' do
  mode 0755
  source 'log-run.erb'
  variables ({ svc: "ssh" })
end

template '/etc/service/ssh/run' do
  mode 0755
  source 'run-root.erb'
  variables ({ exec: "/opt/gonano/sbin/sshd -D -e" })
end

service 'ssh' do
  action :enable
  init :runit
end

ensure_socket 'ssh' do
  port '22'
  action :listening
end

# Import parity service (and start)

directory '/etc/service/parity' do
  recursive true
end

directory '/etc/service/parity/log' do
  recursive true
end

template '/etc/service/parity/log/run' do
  mode 0755
  source 'log-run.erb'
  variables ({ svc: "parity" })
end

# configure basepath

basepath = "/data/var/db/unfs/#{clean_writables([converged_config[:basepath]])[0]}"

# make sure the database dir exists
directory basepath do
  recursive true
end

# and that it's owned by gonano
execute "chown #{basepath}" do
  command "chown -R gonano:gonano #{basepath}"
end

parity_exec = "parity \
--mode #{converged_config[:mode]} \
--base-path #{basepath} \
--chain #{converged_config[:chain]} \
--no-ui \
--jsonrpc-hosts all \
--jsonrpc-cors all \
--jsonrpc-interface all \
--ws-interface all \
--ws-origins all \
--rpcapi=#{converged_config[:rpcapi].join(",")} \
--logging=#{converged_config[:logging]} \
--pruning #{converged_config[:pruning]} \
--port 30303 \
--auto-update none \
--no-ancient-blocks \
--no-color"

template '/etc/service/parity/run' do
  mode 0755
  variables ({ exec: parity_exec })
end

service 'parity' do
  action :start
  init :runit
end

ensure_socket 'parity' do
  port converged_config[:port]
  action :listening
end

# Attach the IP if provided
if payload[:ips]
  # set up persistance
  file "/etc/nanoinit.d/eth00" do
    content <<-EOF
#!/bin/bash
case $1 in
  start)
    if [[ ! $(ifconfig) =~ eth0:0 ]]; then
      ifconfig eth0:0 #{payload[:ips][:default]}
      arping -A -c 10 -I eth0 #{payload[:ips][:default]}
    fi
    ;;
  stop)
    if [[ $(ifconfig) =~ eth0:0 ]]; then
      ifconfig eth0:0 down
    fi
    ;;
  *)
    echo "$0 start|stop"
    exit 1
    ;;
esac
EOF
    mode 0755
  end

  # bring up interface
  execute "bring up vip" do
    command '/etc/nanoinit.d/eth00 start'
  end
end

# create stop script
directory '/etc/service/parity/control' do
  recursive true
end

template '/etc/service/parity/control/d' do
  mode 0755
  source 'down.erb'
  variables ({ svc: "parity", timeout: 100 })
end

# start cron

if Dir.exist? "/opt/nanobox/cron"
  directory '/etc/service/cron'

  hook_file '/etc/service/cron/run' do
    source 'cron'
    mode 0755
  end

  service 'cron' do
    action :enable
    only_if { File.exist?('/etc/service/cron/run') }
  end
end